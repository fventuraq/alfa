Copy file from container to host
docker cp cool_bhaskara:/tmp/pipeline.dot .

# remove all stopped containers
docker rm  $(docker ps -q -a)

# remove unused images
docker rmi $(docker images -q -f dangling=true)

# all images (caution)
############### docker rmi $(docker images -q)

docker stop $(docker ps | egrep alfa | awk '{print $1}')

docker stop $(docker ps | egrep alfa | awk '{print $1}'); docker container prune --force

Show de container ID without trunc 

#get id
docker ps --no-trunc
export CONTAINER_ID=container_id_long

export CONTAINER_ID=$(docker inspect --format="{{.Id}}" sleepy_heisenberg)
cat /sys/fs/cgroup/cpuacct/docker/$CONTAINER_ID/cpuacct.stat | egrep user | awk '{print $2}'

export CONTAINER_ID=$(docker inspect --format="{{.Id}}" sharp_greider)
cat /sys/fs/cgroup/cpuacct/docker/$CONTAINER_ID/cpuacct.stat | egrep user | awk '{print $2}'

#cpu
cat /sys/fs/cgroup/cpuacct/docker/$CONTAINER_ID/cpuacct.stat

#mem 
cat /sys/fs/cgroup/memory/docker/$CONTAINER_ID/memory.stat

#network
cat /proc/$CONTAINER_PID/net/dev

get the amount of data processed 
cat /proc/$CONTAINER_PID/net/dev | egrep eth0

get only the bytes processed (USE TO TEST) 
cat /proc/$CONTAINER_PID/net/dev | egrep eth | awk '{print $2}'
cat /sys/fs/cgroup/cpuacct/docker/$CONTAINER_ID/cpuacct.stat | egrep user | awk '{print $2}'

docker image rm $(docker images -f 'dangling=true' -q)

Join Swarm 

docker swarm join-token worker

docker swarm init 

docker network create -d overlay --attachable alfa_swarm_overlay